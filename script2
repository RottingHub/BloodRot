-- Rejoin Button
-- Rejoin Button
-- Rejoin Button
-- Rejoin Button
-- Rejoin Button
-- Rejoin Button
-- Rejoin Button
-- Rejoin Button
-- Rejoin Button
-- Rejoin Button

local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local CoreGui = game:GetService("CoreGui")

local player = Players.LocalPlayer

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "RejoinGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = CoreGui

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 120, 0, 40)  -- smaller size
frame.Position = UDim2.new(0, 10, 0, 10)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 0
frame.AnchorPoint = Vector2.new(0, 0)
frame.Parent = screenGui

local button = Instance.new("TextButton")
button.Size = UDim2.new(1, 0, 1, 0)
button.Position = UDim2.new(0, 0, 0, 0)
button.BackgroundColor3 = Color3.fromRGB(70, 130, 180)
button.TextColor3 = Color3.new(1, 1, 1)
button.Font = Enum.Font.SourceSansBold
button.TextSize = 16  -- smaller text for smaller button
button.Text = "Rejoin Game"
button.Parent = frame

button.MouseButton1Click:Connect(function()
    local placeId = game.PlaceId
    local jobId = game.JobId
    TeleportService:TeleportToPlaceInstance(placeId, jobId, player)
end)

--Highest Value Brainrot ESP
--Highest Value Brainrot ESP
--Highest Value Brainrot ESP
--Highest Value Brainrot ESP
--Highest Value Brainrot ESP
--Highest Value Brainrot ESP
--Highest Value Brainrot ESP
--Highest Value Brainrot ESP
--Highest Value Brainrot ESP
--Highest Value Brainrot ESP
--Highest Value Brainrot ESP

local Workspace = game:GetService("Workspace")
local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")

local UPDATE_INTERVAL = 0.5 -- update every half second for fast responsiveness

local plotsFolder = Workspace:FindFirstChild("Plots")
if not plotsFolder then
    warn("No 'Plots' folder found in Workspace.")
    return
end

local function parseNumberWithSuffix(text)
    local numStr = text:match("%$(.+)/s")
    if not numStr then return nil end

    local numberPart, suffix = numStr:match("([%d%.]+)(%a*)")
    if not numberPart then return nil end

    local numberValue = tonumber(numberPart)
    if not numberValue then return nil end

    suffix = suffix:upper()

    if suffix == "K" then
        numberValue = numberValue * 1e3
    elseif suffix == "M" then
        numberValue = numberValue * 1e6
    elseif suffix == "B" then
        numberValue = numberValue * 1e9
    end

    return numberValue
end

local function formatNumberWithSuffix(num)
    local function trimTrailingZero(s)
        return s:gsub("%.0$", "")
    end

    if num >= 1e9 then
        return "$" .. trimTrailingZero(string.format("%.1f", num / 1e9)) .. "B/s"
    elseif num >= 1e6 then
        return "$" .. trimTrailingZero(string.format("%.1f", num / 1e6)) .. "M/s"
    elseif num >= 1e3 then
        return "$" .. trimTrailingZero(string.format("%.1f", num / 1e3)) .. "K/s"
    else
        return "$" .. tostring(num) .. "/s"
    end
end

local function findDescendantByNameAndClass(parent, name, className)
    for _, descendant in ipairs(parent:GetDescendants()) do
        if descendant.Name == name and descendant.ClassName == className then
            return descendant
        end
    end
    return nil
end

local function isYourPlot(plot)
    local yourBaseBillboard = findDescendantByNameAndClass(plot, "YourBase", "BillboardGui")
    return yourBaseBillboard and yourBaseBillboard.Enabled == true
end

local function cleanupOldBillboard()
    local oldBillboard = CoreGui:FindFirstChild("GenerationFloatingBillboard")
    if oldBillboard then
        oldBillboard:Destroy()
    end
    local oldAttachment = CoreGui:FindFirstChild("BillboardAttachmentPart")
    if oldAttachment then
        oldAttachment:Destroy()
    end
end

local attachmentPart
local billboardGui
local updateConnection
local colorUpdateConnection
local trackedPodium -- currently tracked highest podium model
local nameLabel -- keep reference for RGB cycling

local function updateHighestGeneration()
    local highestGeneration = -math.huge
    local highestPodiums = {}
    local highestDisplayName = ""

    for _, plot in ipairs(plotsFolder:GetChildren()) do
        if plot:IsA("Model") and not isYourPlot(plot) then
            local animalPodiums = plot:FindFirstChild("AnimalPodiums")
            if animalPodiums then
                for _, podium in ipairs(animalPodiums:GetChildren()) do
                    if podium:IsA("Model") then
                        local attachment = podium:FindFirstChild("Base")
                            and podium.Base:FindFirstChild("Spawn")
                            and podium.Base.Spawn:FindFirstChild("Attachment")
                            or nil

                        if attachment then
                            local animalOverhead = attachment:FindFirstChild("AnimalOverhead")
                            if animalOverhead then
                                local generationTextObj = animalOverhead:FindFirstChild("Generation")
                                local displayNameTextObj = animalOverhead:FindFirstChild("DisplayName")

                                if generationTextObj and generationTextObj:IsA("TextLabel") then
                                    local rawText = generationTextObj.Text
                                    local generationNumber = parseNumberWithSuffix(rawText)
                                    if generationNumber then
                                        if generationNumber > highestGeneration then
                                            highestGeneration = generationNumber
                                            highestPodiums = {podium} -- reset list to new highest
                                            highestDisplayName = (displayNameTextObj and displayNameTextObj:IsA("TextLabel")) and displayNameTextObj.Text or ""
                                        elseif generationNumber == highestGeneration then
                                            table.insert(highestPodiums, podium) -- add to list
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    if highestGeneration == -math.huge then
        cleanupOldBillboard()
        trackedPodium = nil
        if updateConnection then
            updateConnection:Disconnect()
            updateConnection = nil
        end
        if colorUpdateConnection then
            colorUpdateConnection:Disconnect()
            colorUpdateConnection = nil
        end
        return
    end

    local formattedGen = formatNumberWithSuffix(highestGeneration)

    local newPodium = highestPodiums[1]
    local pos

    if newPodium and newPodium:IsA("Model") then
        local basePart = newPodium:FindFirstChild("Base")
        if basePart and basePart:IsA("BasePart") then
            pos = basePart.Position
        else
            pos = newPodium:GetModelCFrame().p
        end
    end

    if not pos then
        cleanupOldBillboard()
        trackedPodium = nil
        if updateConnection then
            updateConnection:Disconnect()
            updateConnection = nil
        end
        if colorUpdateConnection then
            colorUpdateConnection:Disconnect()
            colorUpdateConnection = nil
        end
        return
    end

    if not attachmentPart or not attachmentPart.Parent or not billboardGui or not billboardGui.Parent then
        cleanupOldBillboard()

        attachmentPart = Instance.new("Part")
        attachmentPart.Name = "BillboardAttachmentPart"
        attachmentPart.Anchored = true
        attachmentPart.CanCollide = false
        attachmentPart.Transparency = 1
        attachmentPart.Size = Vector3.new(1,1,1)
        attachmentPart.CFrame = CFrame.new(pos + Vector3.new(0,3,0))
        attachmentPart.Parent = CoreGui

        billboardGui = Instance.new("BillboardGui")
        billboardGui.Name = "GenerationFloatingBillboard"
        billboardGui.Adornee = attachmentPart
        billboardGui.Size = UDim2.new(0, 160, 0, 70)
        billboardGui.AlwaysOnTop = true
        billboardGui.LightInfluence = 0
        billboardGui.StudsOffset = Vector3.new(0, 0, 0)
        billboardGui.Parent = CoreGui

        nameLabel = Instance.new("TextLabel")
        nameLabel.Name = "NameLabel"
        nameLabel.Size = UDim2.new(1, 0, 0.5, 0)
        nameLabel.BackgroundTransparency = 1
        nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0) -- black outline
        nameLabel.TextStrokeTransparency = 0
        nameLabel.Font = Enum.Font.SourceSansBold
        nameLabel.TextScaled = true
        nameLabel.TextWrapped = true
        nameLabel.Text = highestDisplayName
        nameLabel.Parent = billboardGui

        local genLabel = Instance.new("TextLabel")
        genLabel.Name = "GenLabel"
        genLabel.Size = UDim2.new(1, 0, 0.5, 0)
        genLabel.Position = UDim2.new(0, 0, 0.5, 0)
        genLabel.BackgroundTransparency = 1
        genLabel.TextColor3 = Color3.fromRGB(255, 255, 0) -- yellow
        genLabel.TextStrokeColor3 = Color3.new(0, 0, 0) -- black outline
        genLabel.TextStrokeTransparency = 0
        genLabel.Font = Enum.Font.SourceSansBold
        genLabel.TextScaled = true
        genLabel.TextWrapped = true
        genLabel.Text = formattedGen
        genLabel.Parent = billboardGui

        -- Add UIStroke for thicker outline on genLabel
        local stroke = Instance.new("UIStroke")
        stroke.Thickness = 2  -- thicker than default
        stroke.Color = Color3.new(0, 0, 0) -- black
        stroke.Parent = genLabel

        trackedPodium = newPodium

        if updateConnection then
            updateConnection:Disconnect()
        end
        updateConnection = RunService.Heartbeat:Connect(function()
            if trackedPodium and trackedPodium.Parent then
                local bpBase = trackedPodium:FindFirstChild("Base")
                if bpBase and bpBase:IsA("BasePart") then
                    attachmentPart.CFrame = CFrame.new(bpBase.Position + Vector3.new(0,3,0))
                else
                    attachmentPart.CFrame = trackedPodium:GetModelCFrame() + Vector3.new(0,3,0)
                end
            else
                cleanupOldBillboard()
                trackedPodium = nil
                if updateConnection then
                    updateConnection:Disconnect()
                    updateConnection = nil
                end
                if colorUpdateConnection then
                    colorUpdateConnection:Disconnect()
                    colorUpdateConnection = nil
                end
            end
        end)

        -- RGB Rainbow cycling for animal name:
        local hue = 0
        if colorUpdateConnection then
            colorUpdateConnection:Disconnect()
        end
        colorUpdateConnection = RunService.Heartbeat:Connect(function(dt)
            if nameLabel and nameLabel.Parent then
                hue = (hue + dt * 0.25) % 1 -- slower: cycle hue every ~4 seconds
                nameLabel.TextColor3 = Color3.fromHSV(hue, 1, 1)
            else
                if colorUpdateConnection then
                    colorUpdateConnection:Disconnect()
                    colorUpdateConnection = nil
                end
            end
        end)

    else
        local genLabel = billboardGui:FindFirstChild("GenLabel")

        if nameLabel then
            nameLabel.Text = highestDisplayName
        end
        if genLabel then
            genLabel.Text = formattedGen
        end

        if trackedPodium ~= newPodium then
            trackedPodium = newPodium
            if attachmentPart and trackedPodium and trackedPodium.Parent then
                local bpBase = trackedPodium:FindFirstChild("Base")
                if bpBase and bpBase:IsA("BasePart") then
                    attachmentPart.CFrame = CFrame.new(bpBase.Position + Vector3.new(0,3,0))
                else
                    attachmentPart.CFrame = trackedPodium:GetModelCFrame() + Vector3.new(0,3,0)
                end
            end
        end
    end
end

updateHighestGeneration()

while true do
    task.wait(UPDATE_INTERVAL)
    updateHighestGeneration()
end

-- Player ESP
-- Player ESP
-- Player ESP
-- Player ESP
-- Player ESP
-- Player ESP
-- Player ESP
-- Player ESP
-- Player ESP
-- Player ESP
-- Player ESP

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")

local ESP_COLOR_FILL = Color3.fromRGB(173, 216, 230) -- faint light blue fill (for original highlight, optional)
local ESP_FILL_TRANSPARENCY = 0.6

local ESP_OUTLINE_COLOR = Color3.new(1, 1, 1) -- white outline

local NAME_TEXT_COLOR = Color3.new(1, 1, 1) -- white
local NAME_STROKE_COLOR = Color3.new(0, 0, 0) -- black outline

local espObjects = {}

-- Folder to hold clones used for outline when invisible
local clonesFolder = Instance.new("Folder")
clonesFolder.Name = "ESP_Clones"
clonesFolder.Parent = CoreGui

local function createNameTag(character, displayName)
    local head = character:FindFirstChild("Head")
    if not head then return nil end

    local oldGui = head:FindFirstChild("PlayerESPNameTag")
    if oldGui then
        oldGui:Destroy()
    end

    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "PlayerESPNameTag"
    billboardGui.Adornee = head
    billboardGui.Size = UDim2.new(0, 150, 0, 40)
    billboardGui.StudsOffset = Vector3.new(0, 2.5, 0)
    billboardGui.AlwaysOnTop = true
    billboardGui.Parent = head

    local nameLabel = Instance.new("TextLabel")
    nameLabel.BackgroundTransparency = 1
    nameLabel.Size = UDim2.new(1, 0, 1, 0)
    nameLabel.Font = Enum.Font.SourceSansBold
    nameLabel.TextSize = 18
    nameLabel.TextColor3 = NAME_TEXT_COLOR
    nameLabel.TextStrokeColor3 = NAME_STROKE_COLOR
    nameLabel.TextStrokeTransparency = 0
    nameLabel.Text = displayName or ""
    nameLabel.Parent = billboardGui

    return billboardGui
end

local function createHighlight(character)
    local existingHighlight = character:FindFirstChild("PlayerESPHighlight")
    if existingHighlight then
        existingHighlight:Destroy()
    end

    local highlight = Instance.new("Highlight")
    highlight.Name = "PlayerESPHighlight"
    highlight.Adornee = character
    highlight.FillColor = ESP_COLOR_FILL
    highlight.FillTransparency = ESP_FILL_TRANSPARENCY
    highlight.OutlineColor = ESP_OUTLINE_COLOR
    highlight.OutlineTransparency = 0
    highlight.Parent = character
    return highlight
end

local function clonePartForOutline(part, parent)
    local clone = part:Clone()
    clone.Anchored = true
    clone.CanCollide = false
    clone.CastShadow = false
    clone.Massless = true
    clone.Transparency = 1 -- invisible fill so only outline visible
    clone.Name = "ESPClone_"..part.Name
    clone.Parent = parent

    local selectionBox = Instance.new("SelectionBox")
    selectionBox.Adornee = clone
    selectionBox.LineThickness = 0.05
    selectionBox.Color3 = ESP_OUTLINE_COLOR
    selectionBox.SurfaceTransparency = 1 -- so no faces visible, only outline lines
    selectionBox.Parent = clone

    return clone
end

local function setupCharacterEsp(player)
    local character = player.Character
    if not character then return end

    -- Cleanup old esp
    local old = espObjects[player]
    if old then
        if old.highlight then old.highlight:Destroy() end
        if old.nameTag and old.nameTag.Parent then old.nameTag:Destroy() end
        if old.clonesFolder then old.clonesFolder:Destroy() end
    end

    local highlight = createHighlight(character)
    local nameTag = createNameTag(character, player.DisplayName or player.Name)

    local clonesFolderPlayer = Instance.new("Folder")
    clonesFolderPlayer.Name = "ESPClones_" .. player.Name
    clonesFolderPlayer.Parent = clonesFolder

    local clones = {}

    for _, part in ipairs(character:GetChildren()) do
        if part:IsA("BasePart") then
            local clone = clonePartForOutline(part, clonesFolderPlayer)
            table.insert(clones, {original=part, clone=clone})
        end
    end

    espObjects[player] = {
        highlight = highlight,
        nameTag = nameTag,
        clonesFolder = clonesFolderPlayer,
        clones = clones,
        character = character
    }
end

local function cleanupCharacterEsp(player)
    local esp = espObjects[player]
    if esp then
        if esp.highlight then esp.highlight:Destroy() end
        if esp.nameTag and esp.nameTag.Parent then esp.nameTag:Destroy() end
        if esp.clonesFolder then esp.clonesFolder:Destroy() end
        espObjects[player] = nil
    end
end

local function updateClonesPositions(esp)
    for _, pair in ipairs(esp.clones) do
        if pair.original and pair.clone then
            pair.clone.CFrame = pair.original.CFrame
            pair.clone.Size = pair.original.Size
        end
    end
end

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        wait(0.1)
        setupCharacterEsp(player)
    end)
end)

Players.PlayerRemoving:Connect(function(player)
    cleanupCharacterEsp(player)
end)

for _, player in pairs(Players:GetPlayers()) do
    if player.Character then
        setupCharacterEsp(player)
    end
    player.CharacterAdded:Connect(function(character)
        wait(0.1)
        setupCharacterEsp(player)
    end)
end

RunService.Heartbeat:Connect(function()
    for player, esp in pairs(espObjects) do
        if player and esp.character and esp.character.Parent then
            updateClonesPositions(esp)
        end

        if esp and esp.nameTag and esp.nameTag.Parent then
            local nameLabel = esp.nameTag:FindFirstChildOfClass("TextLabel")
            if nameLabel then
                local newName = player.DisplayName or player.Name
                if nameLabel.Text ~= newName then
                    nameLabel.Text = newName
                end
            end
        end
    end
end)

