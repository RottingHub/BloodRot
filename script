-- Godmode
-- Godmode
-- Godmode
-- Godmode
-- Godmode
-- Godmode
-- Godmode
-- Godmode

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local humanoid = nil

local function enableGodMode(hum)
	if not hum then return end
	hum.MaxHealth = math.huge
	hum.Health = math.huge
	
	hum.HealthChanged:Connect(function()
		if hum.Health < hum.MaxHealth then
			hum.Health = hum.MaxHealth
		end
	end)
	
	hum:GetPropertyChangedSignal("PlatformStand"):Connect(function()
		if hum.PlatformStand then
			hum.PlatformStand = false
		end
	end)
end

local function onCharacterAdded(character)
	humanoid = character:WaitForChild("Humanoid")
	enableGodMode(humanoid)
end

if LocalPlayer.Character then
	onCharacterAdded(LocalPlayer.Character)
end
LocalPlayer.CharacterAdded:Connect(onCharacterAdded)

-- Brainrot Esp
-- Brainrot Esp
-- Brainrot Esp
-- Brainrot Esp
-- Brainrot Esp
-- Brainrot Esp
-- Brainrot Esp
-- Brainrot Esp

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local multipliers = {
	K = 1e3, M = 1e6, B = 1e9, T = 1e12, Q = 1e15,
	Qa = 1e18, Qi = 1e21, Sx = 1e24, Sp = 1e27,
	Oc = 1e30, No = 1e33, Dc = 1e36, Vg = 1e39,
	Tg = 1e42, Qg = 1e45, Qh = 1e48, Sh = 1e51,
	St = 1e54, Og = 1e57, Nh = 1e60,
}

local Plots = Workspace:WaitForChild("Plots")

local function suffixToNumber(str)
	local numPart, suffix = string.match(str, "([%d%.]+)(%a%a)")
	if not numPart then
		numPart, suffix = string.match(str, "([%d%.]+)(%a)")
	end
	if not numPart then
		numPart = str
		suffix = nil
	end
	local num = tonumber(numPart)
	if not num then return nil end
	if suffix then
		suffix = suffix:upper()
		local mult = multipliers[suffix]
		if mult then
			num = num * mult
		end
	end
	return num
end

local function extractValue(text)
	if not text then return nil end
	local valueStr = string.match(text, "%$(.-)/")
	if not valueStr then return nil end
	local num = suffixToNumber(valueStr)
	return num
end

local function showBillboard(spawnPart, generationText, displayNameText)
	if not spawnPart or not spawnPart:IsA("BasePart") then return end
	if spawnPart:FindFirstChild("GenBillboard") then return end

	local gui = Instance.new("BillboardGui")
	gui.Name = "GenBillboard"
	gui.Size = UDim2.new(0, 100, 0, 50)
	gui.StudsOffset = Vector3.new(0, 5, 0)
	gui.AlwaysOnTop = true
	gui.Adornee = spawnPart
	gui.MaxDistance = math.huge
	gui.Parent = spawnPart

	local nameLabel = Instance.new("TextLabel")
	nameLabel.Name = "DisplayName"
	nameLabel.Size = UDim2.new(1, 0, 0.55, 0)
	nameLabel.Position = UDim2.new(0, 0, 0, 0)
	nameLabel.BackgroundTransparency = 1
	nameLabel.TextScaled = true
	nameLabel.Font = Enum.Font.FredokaOne
	nameLabel.Text = displayNameText or ""
	nameLabel.Parent = gui

	nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
	nameLabel.TextStrokeTransparency = 0
	nameLabel.TextColor3 = Color3.fromHSV(0, 1, 1)

	local nameStroke = Instance.new("UIStroke")
	nameStroke.Thickness = 2
	nameStroke.Color = Color3.new(0, 0, 0)
	nameStroke.Parent = nameLabel

	local genLabel = Instance.new("TextLabel")
	genLabel.Name = "Text"
	genLabel.Size = UDim2.new(1, 0, 0.45, 0)
	genLabel.Position = UDim2.new(0, 0, 0.55, 0)
	genLabel.BackgroundTransparency = 1
	genLabel.TextScaled = true
	genLabel.Font = Enum.Font.FredokaOne
	genLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
	genLabel.Text = generationText or ""
	genLabel.Parent = gui

	genLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
	genLabel.TextStrokeTransparency = 0
	local genStroke = Instance.new("UIStroke")
	genStroke.Thickness = 2
	genStroke.Color = Color3.new(0, 0, 0)
	genStroke.Parent = genLabel

	local hue = 0
	local connection
	connection = RunService.Heartbeat:Connect(function(dt)
		if nameLabel and nameLabel.Parent then
			hue = (hue + dt * 0.25) % 1
			nameLabel.TextColor3 = Color3.fromHSV(hue, 1, 1)
		else
			if connection then
				connection:Disconnect()
				connection = nil
			end
		end
	end)
end

local function clearAllBillboards(spawns)
	for _, spawn in pairs(spawns) do
		if spawn and spawn:IsA("BasePart") then
			local gui = spawn:FindFirstChild("GenBillboard")
			if gui then gui:Destroy() end
		end
	end
end

local function clearBillboardsOnPlot(plot)
	if not plot then return end
	local animalPodiums = plot:FindFirstChild("AnimalPodiums")
	if not animalPodiums then return end
	
	for _, podium in ipairs(animalPodiums:GetChildren()) do
		if podium:IsA("Model") then
			local base = podium:FindFirstChild("Base")
			if base then
				local spawn = base:FindFirstChild("Spawn")
				if spawn and spawn:IsA("BasePart") then
					local gui = spawn:FindFirstChild("GenBillboard")
					if gui then
						gui:Destroy()
					end
				end
			end
		end
	end
end

local cachedHighestValue = 0
local cachedHighestSpawns = {}
local cachedDisplayNameMap = {}

local function spawnIsStillValid(spawn)
	if not spawn or not spawn:IsDescendantOf(Workspace) then return false end
	local attach = spawn:FindFirstChild("Attachment")
	if not attach then return false end
	local overhead = attach:FindFirstChild("AnimalOverhead")
	if not overhead then return false end
	local gen = overhead:FindFirstChild("Generation")
	if not gen or gen.Text == "" or not extractValue(gen.Text) then return false end
	return true
end

local function isMyBase(plot)
	if not plot then return false end
	local plotSign = plot:FindFirstChild("PlotSign")
	if plotSign then
		local yourBase = plotSign:FindFirstChild("YourBase")
		if yourBase and yourBase.Enabled then
			return true
		end
	end
	return false
end

local function scanAndUpdate()
	local spawns = {}

	for _, plot in ipairs(Plots:GetChildren()) do
		if isMyBase(plot) then
			-- Clear any existing billboards on your base plot spawns
			clearBillboardsOnPlot(plot)
			continue -- Skip this plot entirely
		end

		local animalPodiums = plot:FindFirstChild("AnimalPodiums")
		if animalPodiums then
			for _, podium in ipairs(animalPodiums:GetChildren()) do
				if podium:IsA("Model") then
					local base = podium:FindFirstChild("Base")
					if base then
						local spawn = base:FindFirstChild("Spawn")
						if spawn then
							local attachment = spawn:FindFirstChild("Attachment")
							if attachment then
								local overhead = attachment:FindFirstChild("AnimalOverhead")
								if overhead then
									local genLabel = overhead:FindFirstChild("Generation")
									local displayNameLabel = overhead:FindFirstChild("DisplayName")
									if genLabel and displayNameLabel then
										table.insert(spawns, {
											spawn = spawn,
											genLabel = genLabel,
											displayNameLabel = displayNameLabel,
											value = extractValue(genLabel.Text) or 0
										})
									end
								end
							end
						end
					end
				end
			end
		end
	end

	local currentHighest = 0
	local currentHighestSpawns = {}
	local currentDisplayNameMap = {}
	local currentHighestText = ""

	for _, data in ipairs(spawns) do
		if data.value > currentHighest then
			currentHighest = data.value
			currentHighestSpawns = {data.spawn}
			currentDisplayNameMap = {[data.spawn] = data.displayNameLabel.Text}
			currentHighestText = data.genLabel.Text
		elseif data.value == currentHighest then
			table.insert(currentHighestSpawns, data.spawn)
			currentDisplayNameMap[data.spawn] = data.displayNameLabel.Text
		end
	end

	local needsReset = false
	for _, oldSpawn in pairs(cachedHighestSpawns) do
		if not spawnIsStillValid(oldSpawn) then
			needsReset = true
			break
		end
	end

	if currentHighest ~= cachedHighestValue or needsReset then
		clearAllBillboards(cachedHighestSpawns)

		for _, spawn in pairs(currentHighestSpawns) do
			showBillboard(spawn, currentHighestText, currentDisplayNameMap[spawn])
		end

		cachedHighestValue = currentHighest
		cachedHighestSpawns = currentHighestSpawns
		cachedDisplayNameMap = currentDisplayNameMap
	end
end

RunService.Heartbeat:Connect(scanAndUpdate)

-- Proximity Promt
-- Proximity Promt
-- Proximity Promt
-- Proximity Promt
-- Proximity Promt
-- Proximity Promt
-- Proximity Promt
-- Proximity Promt

local function isRelevantPrompt(prompt)
	local text = prompt.ActionText
	if not text then return false end
	text = string.lower(text)
	return text:find("purchase", 1, true) or text:find("sell", 1, true)
end

local relevantPrompts = {}

local function applySettings(prompt)
	if not prompt:IsDescendantOf(game) then return end
	if not prompt:IsA("ProximityPrompt") then return end
	if not isRelevantPrompt(prompt) then return end

	prompt.HoldDuration = 0
	prompt.RequiresLineOfSight = false
	prompt.ClickablePrompt = true
	prompt.Exclusivity = Enum.ProximityPromptExclusivity.OneGlobally
	prompt.Style = Enum.ProximityPromptStyle.Default
	prompt.KeyboardKeyCode = Enum.KeyCode.E
end

for _, obj in ipairs(game:GetDescendants()) do
	if obj:IsA("ProximityPrompt") and isRelevantPrompt(obj) then
		table.insert(relevantPrompts, obj)
	end
end

game.DescendantAdded:Connect(function(obj)
	if obj:IsA("ProximityPrompt") and isRelevantPrompt(obj) then
		table.insert(relevantPrompts, obj)
	end
end)

RunService.Heartbeat:Connect(function()
	for i = #relevantPrompts, 1, -1 do
		local prompt = relevantPrompts[i]
		if not prompt:IsDescendantOf(game) then
			table.remove(relevantPrompts, i)
		else
			applySettings(prompt)
		end
	end
end)

-- Player ESP
-- Player ESP
-- Player ESP
-- Player ESP
-- Player ESP
-- Player ESP
-- Player ESP
-- Player ESP

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Player = Players.LocalPlayer
local CoreGui = game:GetService("CoreGui")

local espObjects = {}

local function fixInvisiblePart(part)
	if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" and part.Transparency == 1 then
		part.Transparency = 0
	end
end

local function monitorPartTransparency(part)
	if not part:IsA("BasePart") or part.Name == "HumanoidRootPart" then return end
	
	fixInvisiblePart(part)
	
	part:GetPropertyChangedSignal("Transparency"):Connect(function()
		fixInvisiblePart(part)
	end)
end

local function monitorCharacterParts(character)
	for _, part in ipairs(character:GetDescendants()) do
		monitorPartTransparency(part)
	end

	character.DescendantAdded:Connect(function(part)
		monitorPartTransparency(part)
	end)
end

local function createHighlight(character, player)
	local existingHighlight = character:FindFirstChild("ESPHighlight_" .. player.Name)
	if existingHighlight then
		existingHighlight:Destroy()
	end

	local highlight = Instance.new("Highlight")
	highlight.Name = "ESPHighlight_" .. player.Name
	highlight.FillColor = Color3.fromRGB(173, 216, 230)
	highlight.FillTransparency = 0.6
	highlight.OutlineColor = Color3.new(1, 1, 1)
	highlight.OutlineTransparency = 0
	highlight.Adornee = character
	highlight.Parent = character

	return highlight
end

local function createNameTag(character, player)
	local head = character:FindFirstChild("Head")
	if not head then return nil end

	local oldTag = head:FindFirstChild("PlayerESPNameTag")
	if oldTag then oldTag:Destroy() end

	local tag = Instance.new("BillboardGui")
	tag.Name = "PlayerESPNameTag"
	tag.Adornee = head
	tag.Size = UDim2.new(0, 150, 0, 40)
	tag.StudsOffset = Vector3.new(0, 2.5, 0)
	tag.AlwaysOnTop = true
	tag.Parent = head

	local label = Instance.new("TextLabel")
	label.BackgroundTransparency = 1
	label.Size = UDim2.new(1, 0, 1, 0)
	label.Font = Enum.Font.SourceSansBold
	label.TextSize = 18
	label.TextColor3 = Color3.new(1, 1, 1)
	label.TextStrokeColor3 = Color3.new(0, 0, 0)
	label.TextStrokeTransparency = 0
	label.Text = player.DisplayName or player.Name
	label.Parent = tag

	player:GetPropertyChangedSignal("DisplayName"):Connect(function()
		label.Text = player.DisplayName or player.Name
	end)

	return tag
end

local function setupESPForPlayer(player)
	if player == Player then return end

	if espObjects[player] then
		if espObjects[player].highlight then espObjects[player].highlight:Destroy() end
		if espObjects[player].nameTag then espObjects[player].nameTag:Destroy() end
		espObjects[player] = nil
	end

	local character = player.Character
	if not character then return end

	local highlight = createHighlight(character, player)
	local nameTag = createNameTag(character, player)
	monitorCharacterParts(character)

	espObjects[player] = {
		highlight = highlight,
		nameTag = nameTag,
		character = character
	}

	character.AncestryChanged:Connect(function(_, parent)
		if not parent then
			if espObjects[player] then
				if espObjects[player].highlight then espObjects[player].highlight:Destroy() end
				if espObjects[player].nameTag then espObjects[player].nameTag:Destroy() end
				espObjects[player] = nil
			end
		end
	end)
end

Players.PlayerAdded:Connect(function(player)
	if player == Player then return end
	player.CharacterAdded:Connect(function()
		setupESPForPlayer(player)
	end)
end)

for _, player in pairs(Players:GetPlayers()) do
	if player ~= Player then
		if player.Character then
			setupESPForPlayer(player)
		end
		player.CharacterAdded:Connect(function()
			setupESPForPlayer(player)
		end)
	end
end

-- Infinite Jump
-- Infinite Jump
-- Infinite Jump
-- Infinite Jump
-- Infinite Jump
-- Infinite Jump
-- Infinite Jump
-- Infinite Jump

local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local humanoid = nil

local function onCharacterAdded(character)
    humanoid = character:WaitForChild("Humanoid")
end

if LocalPlayer.Character then
    onCharacterAdded(LocalPlayer.Character)
end
LocalPlayer.CharacterAdded:Connect(onCharacterAdded)

UserInputService.JumpRequest:Connect(function()
    if humanoid and humanoid.Health > 0 then
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

-- Speed
-- Speed
-- Speed
-- Speed
-- Speed
-- Speed
-- Speed
-- Speed

local Players = game:GetService("Players")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")

local walkSpeed = 108

local function lockWalkSpeed(humanoid)
	humanoid.WalkSpeed = walkSpeed

	humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
		if humanoid.WalkSpeed ~= walkSpeed then
			humanoid.WalkSpeed = walkSpeed
		end
	end)
end

lockWalkSpeed(Humanoid)

LocalPlayer.CharacterAdded:Connect(function(char)
	Character = char
	Humanoid = char:WaitForChild("Humanoid")
	lockWalkSpeed(Humanoid)
end)

local function equipUseThenUnequip()
	local backpack = LocalPlayer:WaitForChild("Backpack")
	local tool = backpack:FindFirstChild("Invisibility Cloak")
	if tool then
		Humanoid:EquipTool(tool)

		task.wait(0.1)

		if tool and tool.Parent == Character then
			tool:Activate()
		end

		task.wait(0.1)

		Humanoid:UnequipTools()
	end
end

equipUseThenUnequip()

LocalPlayer.CharacterAdded:Connect(function(char)
	Character = char
	Humanoid = char:WaitForChild("Humanoid")
	equipUseThenUnequip()
end)

-- Rejoin GUI
-- Rejoin GUI
-- Rejoin GUI
-- Rejoin GUI
-- Rejoin GUI
-- Rejoin GUI
-- Rejoin GUI
-- Rejoin GUI

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "RejoinCompactUI"
screenGui.ResetOnSpawn = false
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
screenGui.DisplayOrder = 2147483647
screenGui.Parent = game:GetService("CoreGui")

local UI = Instance.new("Frame")
UI.Size = UDim2.new(0, 140, 0, 65)
UI.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
UI.BorderSizePixel = 0
UI.Parent = screenGui
Instance.new("UICorner", UI).CornerRadius = UDim.new(0, 10)

local outline = Instance.new("Frame")
outline.Size = UDim2.new(1, 0, 1, 0)
outline.BackgroundColor3 = Color3.fromRGB(120, 10, 10)
outline.BorderSizePixel = 0
outline.ZIndex = UI.ZIndex - 1
outline.Parent = UI
Instance.new("UICorner", outline).CornerRadius = UDim.new(0, 10)

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0, 28)
Title.BackgroundColor3 = Color3.fromRGB(90, 0, 0)
Title.BorderSizePixel = 0
Title.Text = "Blood Rot 🩸"
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.Font = Enum.Font.GothamBold
Title.TextSize = 16
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Parent = UI
Instance.new("UIPadding", Title).PaddingLeft = UDim.new(0, 8)
Instance.new("UICorner", Title).CornerRadius = UDim.new(0, 8)

local closeBtn = Instance.new("TextButton")
closeBtn.Size = UDim2.new(0, 24, 0, 24)
closeBtn.Position = UDim2.new(1, -28, 0, 2)
closeBtn.BackgroundColor3 = Color3.fromRGB(130, 0, 0)
closeBtn.Text = "X"
closeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
closeBtn.Font = Enum.Font.GothamBold
closeBtn.TextSize = 14
closeBtn.BorderSizePixel = 0
closeBtn.AutoButtonColor = false
closeBtn.Parent = Title
Instance.new("UICorner", closeBtn).CornerRadius = UDim.new(1, 0)

closeBtn.MouseEnter:Connect(function()
	game:GetService("TweenService"):Create(closeBtn, TweenInfo.new(0.15), {
		BackgroundColor3 = Color3.fromRGB(180, 0, 0)
	}):Play()
end)

closeBtn.MouseLeave:Connect(function()
	game:GetService("TweenService"):Create(closeBtn, TweenInfo.new(0.15), {
		BackgroundColor3 = Color3.fromRGB(130, 0, 0)
	}):Play()
end)

closeBtn.MouseButton1Click:Connect(function()
	screenGui:Destroy()
end)

local button = Instance.new("TextButton")
button.Size = UDim2.new(1, 0, 0, 30)
button.Position = UDim2.new(0, 0, 0.70, 0)
button.AnchorPoint = Vector2.new(0, 0.5)
button.BackgroundColor3 = Color3.fromRGB(140, 0, 0)
button.TextColor3 = Color3.fromRGB(255, 255, 255)
button.Text = "Rejoin"
button.Font = Enum.Font.GothamMedium
button.TextSize = 16
button.AutoButtonColor = false
button.Parent = UI
Instance.new("UICorner", button).CornerRadius = UDim.new(0, 6)

button.MouseEnter:Connect(function()
	game:GetService("TweenService"):Create(button, TweenInfo.new(0.2), {
		BackgroundColor3 = Color3.fromRGB(180, 0, 0)
	}):Play()
end)

button.MouseLeave:Connect(function()
	game:GetService("TweenService"):Create(button, TweenInfo.new(0.2), {
		BackgroundColor3 = Color3.fromRGB(140, 0, 0)
	}):Play()
end)

local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local teleporting = false
local player = Players.LocalPlayer

button.MouseButton1Click:Connect(function()
	if teleporting then return end
	teleporting = true
	pcall(function()
		TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, player)
	end)
end)

-- Base Timer
-- Base Timer
-- Base Timer
-- Base Timer
-- Base Timer
-- Base Timer
-- Base Timer
-- Base Timer

local function updateRemainingTimeBillboards()
	local plotsFolder = workspace:FindFirstChild("Plots")
	if not plotsFolder then return end

	for _, plot in ipairs(plotsFolder:GetChildren()) do
		if not plot:IsA("Model") then continue end

		local plotSign = plot:FindFirstChild("PlotSign")
		if not plotSign then continue end

		local surfaceGui = plotSign:FindFirstChild("SurfaceGui")
		local isEmpty = false
		if surfaceGui then
			local frame = surfaceGui:FindFirstChildWhichIsA("Frame")
			local label = frame and frame:FindFirstChildWhichIsA("TextLabel")
			if label and label.Text == "Empty Base" then
				isEmpty = true
			end
		end
		if isEmpty then continue end

		local purchases = plot:FindFirstChild("Purchases")
		if not purchases then continue end

		local plotBlocks = {}
		for _, block in ipairs(purchases:GetChildren()) do
			if block.Name == "PlotBlock" then
				table.insert(plotBlocks, block)
			end
		end

		if #plotBlocks > 0 then
			local randomBlock = plotBlocks[math.random(1, #plotBlocks)]
			local main = randomBlock:FindFirstChild("Main")
			if not main then continue end

			local billboard = main:FindFirstChildWhichIsA("BillboardGui")
			local timeLabel = billboard and billboard:FindFirstChild("RemainingTime")
			if not (timeLabel and timeLabel:IsA("TextLabel")) then continue end

			local friendPanel = plot:FindFirstChild("FriendPanel")
			local friendMain = friendPanel and friendPanel:FindFirstChild("Main")
			if not friendMain then continue end

			local oldGui = friendMain:FindFirstChild("RemainingTimeBillboard")
			if oldGui then
				oldGui:Destroy()
			end

			local gui = Instance.new("BillboardGui")
			gui.Name = "RemainingTimeBillboard"
			gui.Size = UDim2.new(0, 40, 0, 20)
			gui.StudsOffset = Vector3.new(0, 5, 0)
			gui.AlwaysOnTop = true
			gui.MaxDistance = math.huge
			gui.Adornee = friendMain.Parent
			gui.Parent = friendMain

			local displayLabel = Instance.new("TextLabel")
			displayLabel.Size = UDim2.new(1, 0, 1, 0)
			displayLabel.BackgroundTransparency = 1
			displayLabel.TextScaled = true
			displayLabel.Font = Enum.Font.FredokaOne
			displayLabel.TextColor3 = Color3.fromRGB(34, 139, 34)
			displayLabel.Text = timeLabel.Text
			displayLabel.Parent = gui

			local stroke = Instance.new("UIStroke")
			stroke.Color = Color3.fromRGB(70, 0, 0)
			stroke.Thickness = 2
			stroke.Parent = displayLabel

			timeLabel:GetPropertyChangedSignal("Text"):Connect(function()
				displayLabel.Text = timeLabel.Text
			end)
		end
	end
end

updateRemainingTimeBillboards()

-- Fps Counter
-- Fps Counter
-- Fps Counter
-- Fps Counter
-- Fps Counter
-- Fps Counter
-- Fps Counter
-- Fps Counter

local fpsGui = Instance.new("ScreenGui")
fpsGui.Name = "FPSCounterGui"
fpsGui.ResetOnSpawn = false
fpsGui.Parent = CoreGui

local fpsLabel = Instance.new("TextLabel")
fpsLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
fpsLabel.BackgroundTransparency = 0.5
fpsLabel.Size = UDim2.new(0, 80, 0, 30)
fpsLabel.Position = UDim2.new(1, -85, 0, 5) 
fpsLabel.AnchorPoint = Vector2.new(1, 0)
fpsLabel.Font = Enum.Font.SourceSansBold
fpsLabel.TextSize = 18
fpsLabel.TextColor3 = Color3.new(1, 1, 1)
fpsLabel.Text = "FPS: 0"
fpsLabel.Parent = fpsGui

local frameCount = 0
local elapsedTime = 0

RunService.Heartbeat:Connect(function(dt)
	frameCount = frameCount + 1
	elapsedTime = elapsedTime + dt

	if elapsedTime >= 1 then
		local fps = math.floor(frameCount / elapsedTime)
		fpsLabel.Text = "FPS: " .. fps
		frameCount = 0
		elapsedTime = 0
	end
end)
